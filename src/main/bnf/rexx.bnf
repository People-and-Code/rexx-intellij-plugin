{
    parserClass="se.peopleandcode.rexxintellijplugin.gen.RexxParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Rexx"
    psiImplClassSuffix="Impl"
    psiPackage="se.peopleandcode.rexxintellijplugin.gen.psi"
    psiImplPackage="se.peopleandcode.rexxintellijplugin.gen.impl"
    elementTypeHolderClass="se.peopleandcode.rexxintellijplugin.gen.RexxTokens"
    elementTypeClass="se.peopleandcode.rexxintellijplugin.RexxElementType"
    tokenTypeClass="se.peopleandcode.rexxintellijplugin.RexxTokenType"
    tokens=[
        WHITE_SPACE="regexp:([ \t]|,[\n])+"
        TERMINATOR="regexp:[\n;]+"
        // MAJOR TOKEN TYPES
        // TOKEN_NULL
        //     TOKEN_BLANK
        //     TOKEN_SYMBOL
        //     TOKEN_LITERAL
        //     TOKEN_OPERATOR
        //     TOKEN_EOC
        //     TOKEN_COMMA
        //     TOKEN_PREFIX
        TOKEN_LEFT="("
        TOKEN_RIGHT=")"
        //     TOKEN_POINT
        //     TOKEN_COLON
        //     TOKEN_TILDE
        //     TOKEN_DTILDE
        //     TOKEN_SQLEFT
        //     TOKEN_SQRIGHT
        //     TOKEN_DCOLON
        //     TOKEN_CONTINUE
        //     TOKEN_ASSIGNMENT

        // OPERATORS
        OPERATOR_PLUS="regexp:[+]"
        OPERATOR_SUBTRACT="regexp:-"
        OPERATOR_MULTIPLY="regexp:[*]"
        OPERATOR_DIVIDE="regexp:/"
        //OPERATOR_INTDIV="regexp:\\\\"
        OPERATOR_REMAINDER="regexp:%"
        OPERATOR_POWER="regexp:[*][*]"
        OPERATOR_CONCATENATE="regexp:[|][|]"
        OPERATOR_AND="regexp:&&"

        // Bitwise
        OPERATOR_BITWISE_AND="regexp:&"
        OPERATOR_OR="regexp:[|]"
        OPERATOR_XOR="regexp:\^\^"

        OPERATOR_EQUAL="regexp:="
        OPERATOR_NOT_EQUAL="regexp:<>|><|[\\]=|Â¬="
        OPERATOR_GREATERTHAN="regexp:>"
        OPERATOR_BACKSLASH_GREATERTHAN="regexp:\\>"
        OPERATOR_LESSTHAN="regexp:<"
        OPERATOR_BACKSLASH_LESSTHAN="regexp:\\<"
        OPERATOR_GREATERTHAN_EQUAL="regexp:>="
        OPERATOR_LESSTHAN_EQUAL="regexp:=<"

        OPERATOR_STRICT_EQUAL="regexp:=="
        OPERATOR_STRICT_BACKSLASH_EQUAL="regexp:\\=="
        // OPERATOR_STRICT_GREATERTHAN="regexp:==>"
        OPERATOR_STRICT_BACKSLASH_GREATERTHAN="regexp:\\==>"
        OPERATOR_STRICT_LESSTHAN="regexp:==<"
        OPERATOR_STRICT_BACKSLASH_LESSTHAN="regexp:\\==<"
        OPERATOR_STRICT_GREATERTHAN_EQUAL="regexp:==>"
        OPERATOR_STRICT_LESSTHAN_EQUAL="regexp:==<="
        OPERATOR_LESSTHAN_GREATERTHAN="regexp:<>"
        OPERATOR_GREATERTHAN_LESSTHAN="regexp:><"

        OPERATOR_BACKSLASH="regexp:\\\\"

        KEYWORD_ADDRESS="regexp:ADDRESS"
        KEYWORD_ARG="regexp:ARG"
        KEYWORD_VAR="regexp:VAR"
        KEYWORD_VALUE="regexp:VALUE"
        KEYWORD_WITH="regexp:WITH"
        KEYWORD_CALL="regexp:CALL"
        KEYWORD_DO="regexp:DO"
        KEYWORD_DROP="regexp:DROP"
        KEYWORD_ELSE="regexp:ELSE"
        KEYWORD_END="regexp:END"
        KEYWORD_EXIT="regexp:EXIT"
        KEYWORD_EXPOSE="regexp:EXPOSE"
        KEYWORD_FORWARD="regexp:FORWARD"
        KEYWORD_GUARD="regexp:GUARD"
        KEYWORD_IF="regexp:IF"
        KEYWORD_INTERPRET="regexp:INTERPRET"
        KEYWORD_ITERATE="regexp:ITERATE"
        KEYWORD_LEAVE="regexp:LEAVE"
        KEYWORD_LOOP="regexp:LOOP"
        KEYWORD_NOP="regexp:NOP"
        KEYWORD_NUMERIC="regexp:NUMERIC"
        KEYWORD_OPTIONS="regexp:OPTIONS"
        KEYWORD_OTHERWISE="regexp:OTHERWISE"
        KEYWORD_PARSE="regexp:PARSE"
        KEYWORD_PROCEDURE="regexp:PROCEDURE"
        KEYWORD_PULL="regexp:PULL"
        KEYWORD_PUSH="regexp:PUSH"
        KEYWORD_QUEUE="regexp:QUEUE"
        KEYWORD_RAISE="regexp:RAISE"
        KEYWORD_REPLY="regexp:REPLY"
        KEYWORD_RETURN="regexp:RETURN"
        KEYWORD_SAY="regexp:SAY"
        KEYWORD_SELECT="regexp:SELECT"
        KEYWORD_SOURCE="regexp:SOURCE"
        KEYWORD_SIGNAL="regexp:SIGNAL"
        KEYWORD_THEN="regexp:THEN"
        KEYWORD_TRACE="regexp:TRACE"
        KEYWORD_USE="regexp:USE"
        KEYWORD_WHILE="regexp:WHILE"
        //KEYWORD_WHEN="regexp:WHEN"


        // Comments
        SHEBANG="regexp:[#][!][^\n]*"
        LINE_COMMENT="regexp:--[^\n]*"
        MULTILINE_COMMENT="regexp:[/][*]([^*]+|[*]+[^/*])*[*]+[/]"

        // complex

        STRING="regexp:\"[^\"\n]*\"|'[^'\n]*'"
        IDENTIFIER="regexp:[a-zA-Z][a-zA-Z0-9_]*"


        // Numbers
        NUMBER_BINARY="regexp:0b[01]+"
        NUMBER_INT="regexp:[0-9]+"
        NUMBER_DECIMAL="regexp:[0-9]+[.][0-9]+"
        NUMBER_SCIENTIFIC="regexp:[0-9]*[.][0-9]+([eE][+-]?[0-9]+)"
        NUMBER_HEXADECIMAL="regexp:0[xX][0-9a-fA-F]+"

        // OO

        KEYWORD_CLASS="regexp:::class"
        KEYWORD_ATTRIBUTE="regexp:::attribute"
        KEYWORD_METHOD="regexp:::method"
        DOT="regexp:[.]"
        EXCLAMATION="regexp:[!]"
        TILDE="regexp:[~]"
        COMMA="regexp:[,]"
        COLON="regexp:[:]"
    ]
}

/*program*/
rexx_file ::= ncl? instruction_list? END?
private ncl ::=  <<eof>> | null_clause+
private null_clause ::= terminator label_list?
private label_list ::= (LABEL terminator)+
private terminator ::= <<eof>> | TERMINATOR
private terminators ::= terminator+
private instruction_list ::= instruction+
private instruction ::= group | single_instruction ncl
private group ::= instruction_block | if_instruction /* | select */
private command ::= expression_instruction
private keyword_instruction
    ::= address_instruction
    /*| arg*/
    | call_instruction
    /*| drop*/
    | exit_instruction
    /*| interop*/
    /*| iterate*/
    /*| leave*/
    /*| nop*/
    | numeric_instruction
    /*| options*/
    | parse_instruction
    /*| procedure */
    | return_instruction
    | say_instruction
    | signal_instruction
    | trace_instruction
private single_instruction
    ::=  assignment
    | keyword_instruction
    | command
    | while_instruction
    | label_instruction
private parse_instruction
    ::= parse_arg_instruction
    | parse_pull_instruction
    | parse_var_instruction
    | parse_value_instruction
    | parse_source_instruction
numeric_instruction ::= KEYWORD_NUMERIC IDENTIFIER integerConstant
label_instruction ::= name_declaration COLON (KEYWORD_PROCEDURE KEYWORD_EXPOSE IDENTIFIER DOT?)?
return_instruction ::= KEYWORD_RETURN expression?

signal_instruction ::= KEYWORD_SIGNAL expressions

trace_instruction ::= KEYWORD_TRACE ("o"|"i"|"r")

exit_instruction ::= KEYWORD_EXIT expression?

call_instruction ::= KEYWORD_CALL IDENTIFIER comma_seperated_arguments

address_instruction ::= KEYWORD_ADDRESS expressions

expression_instruction
    ::= &IDENTIFIER expression
    | &stringLiteral expression


instruction_block ::= KEYWORD_DO ncl instruction_list KEYWORD_END
parse_pull_instruction ::= KEYWORD_PARSE KEYWORD_PULL parse_target* (COMMA parse_target*)*
parse_arg_instruction ::= KEYWORD_PARSE KEYWORD_ARG parse_target* (COMMA parse_target*)*
parse_var_instruction ::= KEYWORD_PARSE KEYWORD_VAR parse_target*
parse_value_instruction ::= KEYWORD_PARSE KEYWORD_VALUE expression KEYWORD_WITH parse_target*
parse_source_instruction ::= KEYWORD_PARSE KEYWORD_SOURCE parse_target*
private parse_target
    ::= IDENTIFIER DOT EXCLAMATION? IDENTIFIER
    | name_declaration
    | stringLiteral
    | integerConstant
    | remainder // | range | offset

remainder ::= DOT
if_instruction
    ::= KEYWORD_IF expression terminators?
        KEYWORD_THEN terminators?
            instruction
        (terminators? KEYWORD_ELSE terminators?
            instruction)?

while_instruction
    ::= KEYWORD_DO KEYWORD_WHILE expression terminators?
            instruction_list
        KEYWORD_END

assignment ::= name_declaration OPERATOR_EQUAL expressions

name_declaration ::= identifier_ {
   mixin="se.peopleandcode.rexxintellijplugin.instructions.NameDeclaration"
}

say_instruction ::= KEYWORD_SAY expressions?
private expressions ::= expression+
expression ::= concatenation
concatenation ::= compare (OPERATOR_CONCATENATE? !keywords compare)*
compare ::= addition (compare_operators addition)?
private compare_operators
    ::= OPERATOR_EQUAL
    | OPERATOR_NOT_EQUAL
    | OPERATOR_GREATERTHAN
    | OPERATOR_LESSTHAN
    | OPERATOR_GREATERTHAN_EQUAL
    | OPERATOR_LESSTHAN_EQUAL

addition ::= subtraction_ (OPERATOR_PLUS subtraction_)*
private subtraction_ ::= multiplication (subtraction)*
left subtraction ::= OPERATOR_SUBTRACT multiplication
multiplication ::= division_ (OPERATOR_MULTIPLY division_)*
private division_ ::= expressionTerm division*
left division ::= OPERATOR_DIVIDE expressionTerm

expressionTerm
    ::= stringLiteral
    | numericConstant
    | functionCall
    | methodCall
    | stem
    | variable_
    | parentheticalExpression

stem ::= variable_ (DOT EXCLAMATION? NUMBER_INT? IDENTIFIER)+
functionCall ::= variable_ TOKEN_LEFT comma_seperated_arguments TOKEN_RIGHT
private comma_seperated_arguments ::= expression? (COMMA expression?)*
methodCall ::= variable_ TILDE IDENTIFIER TOKEN_LEFT expression? (COMMA expression?)* TOKEN_RIGHT
parentheticalExpression ::= TOKEN_LEFT expression TOKEN_RIGHT
stringLiteral ::= STRING
numericConstant ::= integerConstant | decimalConstant | scientificConstant
integerConstant ::= NUMBER_INT
decimalConstant ::= NUMBER_DECIMAL
scientificConstant ::= NUMBER_SCIENTIFIC
private variable_ ::= variable | global
variable ::= identifier_ {
    mixin="se.peopleandcode.rexxintellijplugin.expressions.Variable"
}
global ::= DOT IDENTIFIER

identifier_ ::= IDENTIFIER | keywords ;

private keywords
    ::= KEYWORD_ADDRESS
    |  KEYWORD_ARG
    |  KEYWORD_VAR
    |  KEYWORD_VALUE
    |  KEYWORD_WITH
    |  KEYWORD_CALL
    |  KEYWORD_DO
    |  KEYWORD_DROP
    |  KEYWORD_ELSE
    |  KEYWORD_END
    |  KEYWORD_EXIT
    |  KEYWORD_EXPOSE
    |  KEYWORD_FORWARD
    |  KEYWORD_GUARD
    |  KEYWORD_IF
    |  KEYWORD_INTERPRET
    |  KEYWORD_ITERATE
    |  KEYWORD_LEAVE
    |  KEYWORD_LOOP
    |  KEYWORD_NOP
    |  KEYWORD_NUMERIC
    |  KEYWORD_OPTIONS
    |  KEYWORD_OTHERWISE
    |  KEYWORD_PARSE
    |  KEYWORD_PROCEDURE
    |  KEYWORD_PULL
    |  KEYWORD_PUSH
    |  KEYWORD_QUEUE
    |  KEYWORD_RAISE
    |  KEYWORD_REPLY
    |  KEYWORD_RETURN
    |  KEYWORD_SAY
    |  KEYWORD_SELECT
    |  KEYWORD_SOURCE
    |  KEYWORD_SIGNAL
    |  KEYWORD_THEN
    |  KEYWORD_TRACE
    |  KEYWORD_USE
    |  KEYWORD_WHILE
