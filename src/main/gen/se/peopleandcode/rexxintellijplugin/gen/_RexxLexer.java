// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/Parse.flex

package se.peopleandcode.rexxintellijplugin.gen;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static se.peopleandcode.rexxintellijplugin.gen.RexxTokens.*;


public class _RexxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\10\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\42\1\0\1\61"+
    "\1\0\1\62\1\63\1\0\1\64\1\65\1\66\1\67"+
    "\1\70\1\36\1\37\1\71\1\72\2\42\1\73\1\74"+
    "\1\45\1\75\1\47\1\50\1\76\1\77\1\100\1\101"+
    "\1\55\1\56\1\57\1\60\1\42\1\0\1\102\1\0"+
    "\1\103\55\0\1\104\u0153\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\23\24\2\1"+
    "\1\25\1\26\1\1\2\0\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\6\0\1\34\1\35\1\36\1\37\3\24"+
    "\1\40\6\24\1\41\30\24\1\42\1\34\1\43\1\44"+
    "\1\45\1\46\2\0\1\47\1\50\1\51\3\0\1\52"+
    "\1\53\1\24\1\54\3\24\1\55\10\24\1\56\13\24"+
    "\1\57\5\24\1\60\1\24\1\61\2\24\1\62\1\0"+
    "\1\63\1\64\3\0\1\65\1\24\1\66\1\67\1\70"+
    "\1\71\6\24\1\72\5\24\1\73\1\74\7\24\1\75"+
    "\3\24\1\76\1\77\1\100\3\0\3\24\1\101\2\24"+
    "\1\102\3\24\1\103\1\24\1\104\1\105\1\106\4\24"+
    "\1\107\1\110\1\111\3\0\1\24\1\112\7\24\1\113"+
    "\1\114\1\115\1\116\1\0\1\117\1\0\1\120\1\121"+
    "\1\24\1\122\1\123\1\124\2\24\1\0\1\125\3\24"+
    "\1\0\1\126\1\127\1\130\1\0\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\105\0\u0114\0\u0159\0\105"+
    "\0\u019e\0\u01e3\0\105\0\105\0\u0228\0\105\0\u026d\0\u02b2"+
    "\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da"+
    "\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\105\0\u0b0d"+
    "\0\u026d\0\u0114\0\105\0\u0b52\0\105\0\u01e3\0\105\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\105\0\105"+
    "\0\u0d7a\0\105\0\u0dbf\0\u0e04\0\u0e49\0\u0564\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u0564\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\105\0\u16a4\0\105"+
    "\0\105\0\105\0\105\0\u16e9\0\u172e\0\u1773\0\u0cab\0\u0cf0"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\105\0\u18cc\0\u0564\0\u1911"+
    "\0\u1956\0\u199b\0\u0564\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u0564\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u0564"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u0564\0\u2058\0\u0564"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u216c\0\105\0\u21b1\0\u21f6"+
    "\0\u223b\0\105\0\u2280\0\u0564\0\u0564\0\u0564\0\u0564\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u0564\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u0564\0\u0564\0\u25bc\0\u2601\0\u2646"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u0564\0\u279f\0\u27e4\0\u2829"+
    "\0\u0564\0\105\0\105\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u0564\0\u2a0c\0\u2a51\0\u0564\0\u2a96\0\u2adb\0\u2b20"+
    "\0\u0564\0\u2b65\0\u0564\0\u0564\0\u0564\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u2c79\0\u0564\0\u0564\0\u0564\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u0564\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u2fb5\0\105\0\u2ffa\0\u0564"+
    "\0\u0564\0\u303f\0\u0564\0\u0564\0\u0564\0\u3084\0\u30c9\0\u310e"+
    "\0\105\0\u3153\0\u3198\0\u31dd\0\u3222\0\u0564\0\u0564\0\u0564"+
    "\0\u3267\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\4\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\32"+
    "\1\40\1\32\1\41\1\32\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\32\1\54"+
    "\1\55\1\2\1\31\1\32\1\33\1\34\1\35\1\32"+
    "\1\40\1\41\1\32\1\43\1\46\1\47\1\50\1\51"+
    "\1\56\1\57\1\60\106\0\1\3\13\0\1\61\71\0"+
    "\1\4\22\0\1\4\57\0\2\62\1\0\1\62\1\63"+
    "\100\62\3\0\1\64\110\0\1\65\75\0\2\66\1\0"+
    "\5\66\1\63\74\66\13\0\1\67\73\0\1\3\120\0"+
    "\1\70\107\0\3\71\74\0\1\72\110\0\1\73\1\0"+
    "\3\24\33\0\1\74\5\0\1\75\36\0\1\73\1\0"+
    "\3\24\105\0\1\76\110\0\1\77\102\0\1\100\1\101"+
    "\103\0\1\77\1\102\76\0\3\32\5\0\3\32\1\103"+
    "\14\32\1\104\7\32\2\0\4\32\1\103\6\32\1\104"+
    "\3\32\24\0\3\32\5\0\30\32\2\0\17\32\24\0"+
    "\3\32\5\0\1\105\27\32\2\0\1\32\1\105\15\32"+
    "\24\0\3\32\5\0\15\32\1\106\2\32\1\107\7\32"+
    "\2\0\12\32\1\106\1\107\3\32\24\0\3\32\5\0"+
    "\12\32\1\110\1\32\1\111\11\32\1\112\1\32\2\0"+
    "\10\32\1\110\6\32\24\0\3\32\5\0\15\32\1\113"+
    "\12\32\2\0\12\32\1\113\4\32\24\0\3\32\5\0"+
    "\23\32\1\114\4\32\2\0\16\32\1\114\24\0\3\32"+
    "\5\0\5\32\1\115\6\32\1\116\5\32\1\117\5\32"+
    "\2\0\15\32\1\117\1\32\24\0\3\32\5\0\4\32"+
    "\1\120\10\32\1\121\12\32\2\0\5\32\1\120\4\32"+
    "\1\121\4\32\24\0\3\32\5\0\15\32\1\122\5\32"+
    "\1\123\4\32\2\0\12\32\1\122\3\32\1\123\24\0"+
    "\3\32\5\0\16\32\1\124\3\32\1\125\5\32\2\0"+
    "\15\32\1\125\1\32\24\0\3\32\5\0\1\126\17\32"+
    "\1\127\2\32\1\130\4\32\2\0\1\32\1\126\11\32"+
    "\1\127\2\32\1\130\24\0\3\32\5\0\23\32\1\131"+
    "\4\32\2\0\16\32\1\131\24\0\3\32\5\0\1\132"+
    "\3\32\1\133\23\32\2\0\1\32\1\132\3\32\1\133"+
    "\11\32\24\0\3\32\5\0\1\134\3\32\1\135\3\32"+
    "\1\136\4\32\1\137\12\32\2\0\1\32\1\134\3\32"+
    "\1\135\1\32\1\136\2\32\1\137\4\32\24\0\3\32"+
    "\5\0\7\32\1\140\10\32\1\141\7\32\2\0\6\32"+
    "\1\140\4\32\1\141\3\32\24\0\3\32\5\0\21\32"+
    "\1\142\6\32\2\0\14\32\1\142\2\32\24\0\3\32"+
    "\5\0\1\143\27\32\2\0\1\32\1\143\15\32\24\0"+
    "\3\32\5\0\7\32\1\144\1\145\17\32\2\0\6\32"+
    "\1\144\1\145\7\32\31\0\1\146\1\147\1\150\30\0"+
    "\1\151\105\0\1\152\124\0\1\153\31\0\1\77\55\0"+
    "\2\64\1\0\102\64\2\70\1\0\102\70\21\0\3\71"+
    "\11\0\1\154\32\0\1\154\14\0\13\72\1\155\71\72"+
    "\21\0\3\156\102\0\3\157\5\0\6\157\25\0\5\157"+
    "\35\0\2\160\146\0\1\161\1\0\1\162\5\0\1\163"+
    "\36\0\1\164\1\0\1\165\75\0\3\32\5\0\3\32"+
    "\1\166\24\32\2\0\4\32\1\166\12\32\24\0\3\32"+
    "\5\0\6\32\1\167\21\32\2\0\17\32\24\0\3\32"+
    "\5\0\12\32\1\170\15\32\2\0\10\32\1\170\6\32"+
    "\24\0\3\32\5\0\15\32\1\171\12\32\2\0\12\32"+
    "\1\171\4\32\24\0\3\32\5\0\21\32\1\172\6\32"+
    "\2\0\14\32\1\172\2\32\24\0\3\32\5\0\3\32"+
    "\1\173\24\32\2\0\4\32\1\173\12\32\24\0\3\32"+
    "\5\0\10\32\1\174\5\32\1\175\11\32\2\0\7\32"+
    "\1\174\7\32\24\0\3\32\5\0\20\32\1\176\7\32"+
    "\2\0\13\32\1\176\3\32\24\0\3\32\5\0\1\177"+
    "\27\32\2\0\1\32\1\177\15\32\24\0\3\32\5\0"+
    "\22\32\1\200\5\32\2\0\15\32\1\200\1\32\24\0"+
    "\3\32\5\0\4\32\1\201\23\32\2\0\5\32\1\201"+
    "\11\32\24\0\3\32\5\0\1\202\27\32\2\0\1\32"+
    "\1\202\15\32\24\0\3\32\5\0\15\32\1\203\12\32"+
    "\2\0\12\32\1\203\4\32\24\0\3\32\5\0\16\32"+
    "\1\204\11\32\2\0\17\32\24\0\3\32\5\0\13\32"+
    "\1\205\14\32\2\0\11\32\1\205\5\32\24\0\3\32"+
    "\5\0\22\32\1\206\5\32\2\0\15\32\1\206\1\32"+
    "\24\0\3\32\5\0\7\32\1\207\20\32\2\0\6\32"+
    "\1\207\10\32\24\0\3\32\5\0\20\32\1\210\7\32"+
    "\2\0\13\32\1\210\3\32\24\0\3\32\5\0\15\32"+
    "\1\211\12\32\2\0\12\32\1\211\4\32\24\0\3\32"+
    "\5\0\12\32\1\212\6\32\1\213\6\32\2\0\10\32"+
    "\1\212\3\32\1\213\2\32\24\0\3\32\5\0\4\32"+
    "\1\214\23\32\2\0\5\32\1\214\11\32\24\0\3\32"+
    "\5\0\10\32\1\215\17\32\2\0\7\32\1\215\7\32"+
    "\24\0\3\32\5\0\16\32\1\216\3\32\1\217\5\32"+
    "\2\0\15\32\1\217\1\32\24\0\3\32\5\0\27\32"+
    "\1\220\2\0\17\32\24\0\3\32\5\0\12\32\1\221"+
    "\15\32\2\0\10\32\1\221\6\32\24\0\3\32\5\0"+
    "\6\32\1\222\21\32\2\0\17\32\24\0\3\32\5\0"+
    "\23\32\1\223\4\32\2\0\16\32\1\223\24\0\3\32"+
    "\5\0\4\32\1\224\23\32\2\0\5\32\1\224\11\32"+
    "\24\0\3\32\5\0\1\225\27\32\2\0\1\32\1\225"+
    "\15\32\24\0\3\32\5\0\4\32\1\226\23\32\2\0"+
    "\5\32\1\226\11\32\24\0\3\32\5\0\12\32\1\227"+
    "\5\32\1\230\7\32\2\0\10\32\1\227\2\32\1\230"+
    "\3\32\24\0\3\32\5\0\10\32\1\231\17\32\2\0"+
    "\7\32\1\231\7\32\24\0\3\32\5\0\22\32\1\232"+
    "\5\32\2\0\15\32\1\232\1\32\32\0\1\233\71\0"+
    "\1\234\1\0\1\234\2\0\3\235\61\0\13\72\1\155"+
    "\4\72\1\236\64\72\21\0\3\156\11\0\1\154\32\0"+
    "\1\154\114\0\1\237\77\0\1\240\101\0\1\241\43\0"+
    "\1\242\76\0\3\32\5\0\20\32\1\243\7\32\2\0"+
    "\13\32\1\243\3\32\24\0\3\32\5\0\12\32\1\244"+
    "\15\32\2\0\10\32\1\244\6\32\24\0\3\32\5\0"+
    "\16\32\1\245\11\32\2\0\17\32\24\0\3\32\5\0"+
    "\4\32\1\246\23\32\2\0\5\32\1\246\11\32\24\0"+
    "\3\32\5\0\22\32\1\247\5\32\2\0\15\32\1\247"+
    "\1\32\24\0\3\32\5\0\15\32\1\250\12\32\2\0"+
    "\12\32\1\250\4\32\24\0\3\32\5\0\25\32\1\251"+
    "\2\32\2\0\17\32\24\0\3\32\5\0\20\32\1\252"+
    "\7\32\2\0\13\32\1\252\3\32\24\0\3\32\5\0"+
    "\4\32\1\253\23\32\2\0\5\32\1\253\11\32\24\0"+
    "\3\32\5\0\20\32\1\254\7\32\2\0\13\32\1\254"+
    "\3\32\24\0\3\32\5\0\24\32\1\255\3\32\2\0"+
    "\17\32\24\0\3\32\5\0\16\32\1\256\11\32\2\0"+
    "\17\32\24\0\3\32\5\0\4\32\1\257\23\32\2\0"+
    "\5\32\1\257\11\32\24\0\3\32\5\0\10\32\1\260"+
    "\17\32\2\0\7\32\1\260\7\32\24\0\3\32\5\0"+
    "\4\32\1\261\23\32\2\0\5\32\1\261\11\32\24\0"+
    "\3\32\5\0\21\32\1\262\6\32\2\0\14\32\1\262"+
    "\2\32\24\0\3\32\5\0\2\32\1\263\25\32\2\0"+
    "\3\32\1\263\13\32\24\0\3\32\5\0\12\32\1\264"+
    "\15\32\2\0\10\32\1\264\6\32\24\0\3\32\5\0"+
    "\7\32\1\265\20\32\2\0\6\32\1\265\10\32\24\0"+
    "\3\32\5\0\23\32\1\266\4\32\2\0\16\32\1\266"+
    "\24\0\3\32\5\0\21\32\1\267\6\32\2\0\14\32"+
    "\1\267\2\32\24\0\3\32\5\0\12\32\1\270\15\32"+
    "\2\0\10\32\1\270\6\32\24\0\3\32\5\0\23\32"+
    "\1\271\4\32\2\0\16\32\1\271\24\0\3\32\5\0"+
    "\4\32\1\272\23\32\2\0\5\32\1\272\11\32\24\0"+
    "\3\32\5\0\14\32\1\273\13\32\2\0\17\32\24\0"+
    "\3\32\5\0\20\32\1\274\7\32\2\0\13\32\1\274"+
    "\3\32\24\0\3\32\5\0\14\32\1\275\13\32\2\0"+
    "\17\32\24\0\3\32\5\0\2\32\1\276\25\32\2\0"+
    "\3\32\1\276\13\32\24\0\3\32\5\0\23\32\1\277"+
    "\4\32\2\0\16\32\1\277\24\0\3\32\5\0\12\32"+
    "\1\300\15\32\2\0\10\32\1\300\6\32\24\0\3\32"+
    "\5\0\7\32\1\301\20\32\2\0\6\32\1\301\10\32"+
    "\31\0\1\302\1\0\1\303\75\0\3\235\161\0\1\304"+
    "\70\0\1\305\120\0\1\306\25\0\3\32\5\0\4\32"+
    "\1\307\23\32\2\0\5\32\1\307\11\32\24\0\3\32"+
    "\5\0\21\32\1\310\6\32\2\0\14\32\1\310\2\32"+
    "\24\0\3\32\5\0\1\311\27\32\2\0\1\32\1\311"+
    "\15\32\24\0\3\32\5\0\3\32\1\312\24\32\2\0"+
    "\4\32\1\312\12\32\24\0\3\32\5\0\20\32\1\313"+
    "\7\32\2\0\13\32\1\313\3\32\24\0\3\32\5\0"+
    "\1\314\27\32\2\0\1\32\1\314\15\32\24\0\3\32"+
    "\5\0\4\32\1\315\23\32\2\0\5\32\1\315\11\32"+
    "\24\0\3\32\5\0\20\32\1\316\7\32\2\0\13\32"+
    "\1\316\3\32\24\0\3\32\5\0\15\32\1\317\12\32"+
    "\2\0\12\32\1\317\4\32\24\0\3\32\5\0\20\32"+
    "\1\320\7\32\2\0\13\32\1\320\3\32\24\0\3\32"+
    "\5\0\4\32\1\321\23\32\2\0\5\32\1\321\11\32"+
    "\24\0\3\32\5\0\4\32\1\322\23\32\2\0\5\32"+
    "\1\322\11\32\24\0\3\32\5\0\4\32\1\323\23\32"+
    "\2\0\5\32\1\323\11\32\24\0\3\32\5\0\4\32"+
    "\1\324\23\32\2\0\5\32\1\324\11\32\24\0\3\32"+
    "\5\0\27\32\1\325\2\0\17\32\24\0\3\32\5\0"+
    "\20\32\1\326\7\32\2\0\13\32\1\326\3\32\24\0"+
    "\3\32\5\0\2\32\1\327\25\32\2\0\3\32\1\327"+
    "\13\32\24\0\3\32\5\0\1\330\27\32\2\0\1\32"+
    "\1\330\15\32\24\0\3\32\5\0\2\32\1\331\25\32"+
    "\2\0\3\32\1\331\13\32\24\0\3\32\5\0\4\32"+
    "\1\332\23\32\2\0\5\32\1\332\11\32\24\0\3\32"+
    "\5\0\4\32\1\333\23\32\2\0\5\32\1\333\11\32"+
    "\24\0\3\32\5\0\4\32\1\334\23\32\2\0\5\32"+
    "\1\334\11\32\101\0\1\335\105\0\1\336\76\0\1\337"+
    "\34\0\3\32\5\0\21\32\1\340\6\32\2\0\14\32"+
    "\1\340\2\32\24\0\3\32\5\0\4\32\1\341\23\32"+
    "\2\0\5\32\1\341\11\32\24\0\3\32\5\0\20\32"+
    "\1\342\7\32\2\0\13\32\1\342\3\32\24\0\3\32"+
    "\5\0\16\32\1\343\11\32\2\0\17\32\24\0\3\32"+
    "\5\0\22\32\1\344\5\32\2\0\15\32\1\344\1\32"+
    "\24\0\3\32\5\0\10\32\1\345\17\32\2\0\7\32"+
    "\1\345\7\32\24\0\3\32\5\0\14\32\1\346\13\32"+
    "\2\0\17\32\24\0\3\32\5\0\25\32\1\347\2\32"+
    "\2\0\17\32\24\0\3\32\5\0\3\32\1\350\24\32"+
    "\2\0\4\32\1\350\12\32\24\0\3\32\5\0\14\32"+
    "\1\351\13\32\2\0\17\32\24\0\3\32\5\0\22\32"+
    "\1\352\5\32\2\0\15\32\1\352\1\32\24\0\3\32"+
    "\5\0\12\32\1\353\15\32\2\0\10\32\1\353\6\32"+
    "\24\0\3\32\5\0\4\32\1\354\23\32\2\0\5\32"+
    "\1\354\11\32\75\0\1\355\111\0\1\356\102\0\1\357"+
    "\30\0\3\32\5\0\21\32\1\360\6\32\2\0\14\32"+
    "\1\360\2\32\24\0\3\32\5\0\3\32\1\361\24\32"+
    "\2\0\4\32\1\361\12\32\24\0\3\32\5\0\20\32"+
    "\1\362\7\32\2\0\13\32\1\362\3\32\24\0\3\32"+
    "\5\0\4\32\1\363\23\32\2\0\5\32\1\363\11\32"+
    "\24\0\3\32\5\0\2\32\1\364\25\32\2\0\3\32"+
    "\1\364\13\32\24\0\3\32\5\0\21\32\1\365\6\32"+
    "\2\0\14\32\1\365\2\32\24\0\3\32\5\0\10\32"+
    "\1\366\17\32\2\0\7\32\1\366\7\32\24\0\3\32"+
    "\5\0\23\32\1\367\4\32\2\0\16\32\1\367\70\0"+
    "\1\370\106\0\1\371\36\0\3\32\5\0\4\32\1\372"+
    "\23\32\2\0\5\32\1\372\11\32\24\0\3\32\5\0"+
    "\21\32\1\373\6\32\2\0\14\32\1\373\2\32\24\0"+
    "\3\32\5\0\20\32\1\374\7\32\2\0\13\32\1\374"+
    "\3\32\104\0\1\375\24\0\3\32\5\0\22\32\1\376"+
    "\5\32\2\0\15\32\1\376\1\32\24\0\3\32\5\0"+
    "\4\32\1\377\23\32\2\0\5\32\1\377\11\32\24\0"+
    "\3\32\5\0\4\32\1\u0100\23\32\2\0\5\32\1\u0100"+
    "\11\32\103\0\1\u0101\74\0\1\u0102\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12972];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\40\1\1\11\1\1\2\0\1\11\1\1"+
    "\1\11\1\0\1\11\1\1\6\0\2\11\1\1\1\11"+
    "\43\1\1\11\1\1\4\11\2\0\3\1\3\0\1\1"+
    "\1\11\46\1\1\0\1\1\1\11\3\0\1\11\37\1"+
    "\2\11\3\0\26\1\3\0\15\1\1\0\1\11\1\0"+
    "\10\1\1\0\1\11\3\1\1\0\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _RexxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RexxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 90: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 3:
            { return TERMINATOR;
            }
          // fall through
          case 92: break;
          case 4:
            { return EXCLAMATION;
            }
          // fall through
          case 93: break;
          case 5:
            { return OPERATOR_REMAINDER;
            }
          // fall through
          case 94: break;
          case 6:
            { return OPERATOR_BITWISE_AND;
            }
          // fall through
          case 95: break;
          case 7:
            { return TOKEN_LEFT;
            }
          // fall through
          case 96: break;
          case 8:
            { return TOKEN_RIGHT;
            }
          // fall through
          case 97: break;
          case 9:
            { return OPERATOR_MULTIPLY;
            }
          // fall through
          case 98: break;
          case 10:
            { return OPERATOR_PLUS;
            }
          // fall through
          case 99: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 100: break;
          case 12:
            { return OPERATOR_SUBTRACT;
            }
          // fall through
          case 101: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 102: break;
          case 14:
            { return OPERATOR_DIVIDE;
            }
          // fall through
          case 103: break;
          case 15:
            { return NUMBER_INT;
            }
          // fall through
          case 104: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 105: break;
          case 17:
            { return OPERATOR_LESSTHAN;
            }
          // fall through
          case 106: break;
          case 18:
            { return OPERATOR_EQUAL;
            }
          // fall through
          case 107: break;
          case 19:
            { return OPERATOR_GREATERTHAN;
            }
          // fall through
          case 108: break;
          case 20:
            { return IDENTIFIER;
            }
          // fall through
          case 109: break;
          case 21:
            { return OPERATOR_OR;
            }
          // fall through
          case 110: break;
          case 22:
            { return TILDE;
            }
          // fall through
          case 111: break;
          case 23:
            { return STRING;
            }
          // fall through
          case 112: break;
          case 24:
            { return SHEBANG;
            }
          // fall through
          case 113: break;
          case 25:
            { return OPERATOR_AND;
            }
          // fall through
          case 114: break;
          case 26:
            { return OPERATOR_POWER;
            }
          // fall through
          case 115: break;
          case 27:
            { return LINE_COMMENT;
            }
          // fall through
          case 116: break;
          case 28:
            { return OPERATOR_NOT_EQUAL;
            }
          // fall through
          case 117: break;
          case 29:
            { return OPERATOR_LESSTHAN_EQUAL;
            }
          // fall through
          case 118: break;
          case 30:
            { return OPERATOR_STRICT_EQUAL;
            }
          // fall through
          case 119: break;
          case 31:
            { return OPERATOR_GREATERTHAN_EQUAL;
            }
          // fall through
          case 120: break;
          case 32:
            { return DO;
            }
          // fall through
          case 121: break;
          case 33:
            { return IF;
            }
          // fall through
          case 122: break;
          case 34:
            { return OPERATOR_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 123: break;
          case 35:
            { return OPERATOR_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 124: break;
          case 36:
            { return OPERATOR_BACKSLASH;
            }
          // fall through
          case 125: break;
          case 37:
            { return OPERATOR_XOR;
            }
          // fall through
          case 126: break;
          case 38:
            { return OPERATOR_CONCATENATE;
            }
          // fall through
          case 127: break;
          case 39:
            { return NUMBER_DECIMAL;
            }
          // fall through
          case 128: break;
          case 40:
            { return NUMBER_HEXADECIMAL;
            }
          // fall through
          case 129: break;
          case 41:
            { return NUMBER_BINARY;
            }
          // fall through
          case 130: break;
          case 42:
            { return OPERATOR_STRICT_LESSTHAN;
            }
          // fall through
          case 131: break;
          case 43:
            { return OPERATOR_STRICT_GREATERTHAN_EQUAL;
            }
          // fall through
          case 132: break;
          case 44:
            { return ARG;
            }
          // fall through
          case 133: break;
          case 45:
            { return END;
            }
          // fall through
          case 134: break;
          case 46:
            { return NOP;
            }
          // fall through
          case 135: break;
          case 47:
            { return SAY;
            }
          // fall through
          case 136: break;
          case 48:
            { return USE;
            }
          // fall through
          case 137: break;
          case 49:
            { return VAR;
            }
          // fall through
          case 138: break;
          case 50:
            { return OPERATOR_STRICT_BACKSLASH_EQUAL;
            }
          // fall through
          case 139: break;
          case 51:
            { return NUMBER_SCIENTIFIC;
            }
          // fall through
          case 140: break;
          case 52:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 141: break;
          case 53:
            { return OPERATOR_STRICT_LESSTHAN_EQUAL;
            }
          // fall through
          case 142: break;
          case 54:
            { return CALL;
            }
          // fall through
          case 143: break;
          case 55:
            { return DROP;
            }
          // fall through
          case 144: break;
          case 56:
            { return ELSE;
            }
          // fall through
          case 145: break;
          case 57:
            { return EXIT;
            }
          // fall through
          case 146: break;
          case 58:
            { return LOOP;
            }
          // fall through
          case 147: break;
          case 59:
            { return PULL;
            }
          // fall through
          case 148: break;
          case 60:
            { return PUSH;
            }
          // fall through
          case 149: break;
          case 61:
            { return THEN;
            }
          // fall through
          case 150: break;
          case 62:
            { return WITH;
            }
          // fall through
          case 151: break;
          case 63:
            { return OPERATOR_STRICT_BACKSLASH_LESSTHAN;
            }
          // fall through
          case 152: break;
          case 64:
            { return OPERATOR_STRICT_BACKSLASH_GREATERTHAN;
            }
          // fall through
          case 153: break;
          case 65:
            { return GUARD;
            }
          // fall through
          case 154: break;
          case 66:
            { return LEAVE;
            }
          // fall through
          case 155: break;
          case 67:
            { return PARSE;
            }
          // fall through
          case 156: break;
          case 68:
            { return QUEUE;
            }
          // fall through
          case 157: break;
          case 69:
            { return RAISE;
            }
          // fall through
          case 158: break;
          case 70:
            { return REPLY;
            }
          // fall through
          case 159: break;
          case 71:
            { return TRACE;
            }
          // fall through
          case 160: break;
          case 72:
            { return VALUE;
            }
          // fall through
          case 161: break;
          case 73:
            { return WHILE;
            }
          // fall through
          case 162: break;
          case 74:
            { return EXPOSE;
            }
          // fall through
          case 163: break;
          case 75:
            { return RETURN;
            }
          // fall through
          case 164: break;
          case 76:
            { return SELECT;
            }
          // fall through
          case 165: break;
          case 77:
            { return SIGNAL;
            }
          // fall through
          case 166: break;
          case 78:
            { return SOURCE;
            }
          // fall through
          case 167: break;
          case 79:
            { return CLASS;
            }
          // fall through
          case 168: break;
          case 80:
            { return ADDRESS;
            }
          // fall through
          case 169: break;
          case 81:
            { return FORWARD;
            }
          // fall through
          case 170: break;
          case 82:
            { return ITERATE;
            }
          // fall through
          case 171: break;
          case 83:
            { return NUMERIC;
            }
          // fall through
          case 172: break;
          case 84:
            { return OPTIONS;
            }
          // fall through
          case 173: break;
          case 85:
            { return METHOD;
            }
          // fall through
          case 174: break;
          case 86:
            { return INTERPRET;
            }
          // fall through
          case 175: break;
          case 87:
            { return OTHERWISE;
            }
          // fall through
          case 176: break;
          case 88:
            { return PROCEDURE;
            }
          // fall through
          case 177: break;
          case 89:
            { return ATTRIBUTE;
            }
          // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
